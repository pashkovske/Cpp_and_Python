# реализация метода Монте-Карло
import random
def MonteKarloPi(N):
    plane = [[random.random(), random.random()] for i in range(N)]

    N_incircled = 0
    for i in range(N):
        if (plane[i][0] - 1/2)**2 + (plane[i][1] - 1/2)**2 < 1/4:
            N_incircled += 1
    pi = N_incircled / N * 4
    return pi
# точка с вероятностью p = пи/4 попадает в окружность с вероятностью 1-p не попадает
# таким образом согласно биномиальному распределению получаем вероятность попадания n точек в круг при N точках в квадрате
# N!/n!(N-n)!*p^n*(1-p)^(N-n)
# матожидание M = N*p, дисперсия D = N*p*(1-p)
# ошибка, по определению n_error = sqrt(D)
# pi_error = n_error/N*4
# согласно центральной предельной теореме из теории вероятностей, биномиальное распределение стремится к нормальному распределению при больших N
import math
def pi_error(N):
    return math.sqrt(math.pi*(4-math.pi)/N)
# графическое сравнение ожидаемой ошибки с реальной
xs = []
ys = []
yr = []
for i in range(10, 1000, 20):
    xs += [i]
    ys += [pi_error(i)]
    yr += [abs(math.pi - pi_error(i))]
p